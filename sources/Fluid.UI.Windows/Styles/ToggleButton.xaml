<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Fluid.UI.Windows.Controls.Styles"
                    xmlns:helpers="clr-namespace:Fluid.UI.Windows.Helpers">

    <ResourceDictionary.MergedDictionaries>

        <!-- Base control. -->
        <ResourceDictionary Source="pack://application:,,,/Fluid.UI.Windows;component/Styles/Control.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <!-- Button focus visual style. -->
    <Style x:Key="ToggleButtonFocusVisual">

        <Setter Property="Control.Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Control}">

                    <Border Margin="-1"
                            BorderThickness="1"
                            Background="Transparent"
                            BorderBrush="{TemplateBinding Foreground}"
                            CornerRadius="{DynamicResource StandardCornerRadius}"
                            SnapsToDevicePixels="True" />

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <!-- Base button style.-->
    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ControlStyle}">

        <Setter Property="helpers:Control.CornerRadius" Value="{DynamicResource StandardCornerRadius}" />

        <Setter Property="HorizontalContentAlignment" Value="Center" />

        <Setter Property="Padding" Value="0" />

        <Setter Property="Background" Value="{DynamicResource Primary-300-Brush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Primary-500-Brush}" />
        <Setter Property="Foreground" Value="{DynamicResource Primary-Foreground-100-Brush}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Height" Value="36"/>

        <Setter Property="IsTabStop" Value="True" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid>

                        <Border Background="{TemplateBinding Background}"
                                CornerRadius="{TemplateBinding helpers:Control.CornerRadius}" 
                                x:Name="BackgroundBorder"/>

                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding helpers:Control.CornerRadius}" 
                                x:Name="StrokeBorder"/>

                        <Border x:Name="HighlightBorder"
                                Background="{TemplateBinding Foreground}"
                                CornerRadius="{TemplateBinding helpers:Control.CornerRadius}"
                                Opacity="0.0" />

                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                            <!-- Сетка контента кнопки -->
                            <ContentControl x:Name="PART_ContentPresenter"
                                            Margin="{TemplateBinding Padding}"
                                            Content="{TemplateBinding Content}"
                                            Focusable="False"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            TextElement.Foreground="{TemplateBinding Foreground}"
                                            Foreground="{TemplateBinding Foreground}"
                                            Padding="{TemplateBinding Padding}"
                                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                            IsTabStop="False"/>

                        </Grid>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource Primary-100-Brush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Primary-300-Brush}" />
                            <Setter Property="Foreground" Value="{DynamicResource Primary-Foreground-900-Brush}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Accent-500-Brush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Accent-700-Brush}" />
                            <Setter Property="Foreground" Value="{DynamicResource Accent-Foreground-100-Brush}" />
                        </Trigger>

                        <MultiTrigger>

                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter Property="Opacity" TargetName="BackgroundBorder" Value="{StaticResource Opacity5}"/>
                            <Setter Property="Opacity" TargetName="StrokeBorder" Value="{StaticResource Opacity8}"/>
                            <Setter Property="Background" Value="{DynamicResource Accent-500-Brush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Accent-700-Brush}" />
                            <Setter Property="Foreground" Value="{DynamicResource Accent-Foreground-100-Brush}" />

                        </MultiTrigger>

                        <!-- Наведение курсора мыши -->
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard TargetName="HighlightBorder">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.125" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <!-- Уведение курсора мыши -->
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard TargetName="HighlightBorder">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.0" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <!-- Событие нажатия левой кнопки мыши -->
                        <EventTrigger RoutedEvent="Click">
                            <BeginStoryboard>
                                <Storyboard TargetName="HighlightBorder">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                   AutoReverse="True">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.25" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <!-- Combobox toggle button style -->
    <Style x:Key="ComboBoxToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ControlStyle}">

        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />

        <Setter Property="Foreground" Value="{DynamicResource Primary-Foreground-900-Brush}" />

        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />

        <Setter Property="Padding" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>

                        <VisualStateManager.VisualStateGroups>

                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked" />
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>

                        </VisualStateManager.VisualStateGroups>

                        <Grid Grid.Column="0" Grid.ColumnSpan="2">

                            <Border Background="White" Opacity="0"/>

                        </Grid>

                        <Grid Grid.Column="1">

                            <Viewbox Stretch="Uniform"
                                     Margin="{TemplateBinding Padding}"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                     HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     Height="12"
                                     Width="12">

                                <Path x:Name="Path" Fill="{TemplateBinding Foreground}"
                                      Stroke="{TemplateBinding Foreground}"
                                      Data="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content, Mode=OneWay}" />

                            </Viewbox>

                        </Grid>

                    </Grid>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Primary-Foreground-500-Brush}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Primary-Foreground-500-Brush}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Primary-Foreground-900-Brush}" />
            </Trigger>

        </Style.Triggers>

    </Style>
    
</ResourceDictionary>